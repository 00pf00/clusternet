/*
Copyright 2021 The Clusternet Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/clusternet/clusternet/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnnouncementLister helps list Announcements.
// All objects returned here must be treated as read-only.
type AnnouncementLister interface {
	// List lists all Announcements in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Announcement, err error)
	// Announcements returns an object that can list and get Announcements.
	Announcements(namespace string) AnnouncementNamespaceLister
	AnnouncementListerExpansion
}

// announcementLister implements the AnnouncementLister interface.
type announcementLister struct {
	indexer cache.Indexer
}

// NewAnnouncementLister returns a new AnnouncementLister.
func NewAnnouncementLister(indexer cache.Indexer) AnnouncementLister {
	return &announcementLister{indexer: indexer}
}

// List lists all Announcements in the indexer.
func (s *announcementLister) List(selector labels.Selector) (ret []*v1alpha1.Announcement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Announcement))
	})
	return ret, err
}

// Announcements returns an object that can list and get Announcements.
func (s *announcementLister) Announcements(namespace string) AnnouncementNamespaceLister {
	return announcementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnnouncementNamespaceLister helps list and get Announcements.
// All objects returned here must be treated as read-only.
type AnnouncementNamespaceLister interface {
	// List lists all Announcements in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Announcement, err error)
	// Get retrieves the Announcement from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Announcement, error)
	AnnouncementNamespaceListerExpansion
}

// announcementNamespaceLister implements the AnnouncementNamespaceLister
// interface.
type announcementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Announcements in the indexer for a given namespace.
func (s announcementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Announcement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Announcement))
	})
	return ret, err
}

// Get retrieves the Announcement from the indexer for a given namespace and name.
func (s announcementNamespaceLister) Get(name string) (*v1alpha1.Announcement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("announcement"), name)
	}
	return obj.(*v1alpha1.Announcement), nil
}
